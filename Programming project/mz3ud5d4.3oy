#ifndef __TREE_H__
#define __THREE_H__

#include "DList.h"

template <class DATA>
struct treeNode
{
	DATA data;
	treeNode* parent;
	DList<treeNode<DATA>*> children;

	treeNode(DATA _data)
	{
		data = _data;
	}
};

template <class DATA>
class Tree
{
private:
	treeNode<DATA>* rootNode;

public:

	///////////////
	//Constructor//
	///////////////

	Tree(const DATA& dataGiven)
	{
		rootNode = new treeNode<DATA>;
		rootNode->data = dataGiven;
		rootNode->parent = NULL;
	}

	treeNode<DATA>* Add(const DATA& dataGiven)
	{
		treeNode<DATA>* newNode = new treeNode<DATA>(dataGiven);
		rootNode->children.Add(newNode);
		newNode->parent = rootNode;
		return newNode;
	}

	treeNode<DATA>* Add(DATA dataGiven, treeNode<DATA>* parentGiven)
	{
		treeNode<DATA>* newNode = new treeNode<DATA>(dataGiven);
		parentGiven->children.Add(newNode);
		newNode->parent = parentGiven;
		return newNode;
	}
};

#endif //__TREE_H__